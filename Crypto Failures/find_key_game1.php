<?php
// script generated by Grok / this version is game type CLI
// script for tryhackme room Crypto Failures Implementing your own military-grade encryption is usually not the best idea.
// room link: https://tryhackme.com/room/cryptofailures
// 
// Target server details
$host = "10.10.232.64";
$port = 80;

// Characters to brute-force
$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=[]{}|;:,.<>?';

// ANSI color codes
define('COLOR_RESET', "\033[0m");
define('COLOR_GREEN', "\033[32m");
define('COLOR_YELLOW', "\033[33m");
define('COLOR_CYAN', "\033[36m");
define('COLOR_WHITE', "\033[37m");
define('COLOR_RED', "\033[31m");

// Function to send raw HTTP request and get cookie
function send_probe($user_agent) {
    global $host, $port;
    echo COLOR_CYAN . "Sending probe: '$user_agent'" . COLOR_RESET . "\n";
    sleep(1); // Dramatic pause
    
    $fp = fsockopen($host, $port, $errno, $errstr, 30);
    if (!$fp) {
        echo COLOR_RED . "Vault resists: $errno - $errstr" . COLOR_RESET . "\n";
        return null;
    }
    
    $request = "GET / HTTP/1.1\r\n";
    $request .= "Host: $host\r\n";
    $request .= "User-Agent: $user_agent\r\n";
    $request .= "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n";
    $request .= "Connection: close\r\n";
    $request .= "\r\n";
    
    fwrite($fp, $request);
    $response = '';
    while (!feof($fp)) {
        $response .= fgets($fp, 1024);
    }
    fclose($fp);
    
    preg_match('/Set-Cookie: secure_cookie=([^;]+)/', $response, $matches);
    $cookie = isset($matches[1]) ? $matches[1] : null;
    echo COLOR_WHITE . "Vault response: $cookie" . COLOR_RESET . "\n";
    return $cookie;
}

// Function to split cookie into 13-char hashes
function analyze_clue($cookie) {
    if (!$cookie) return null;
    $secure_cookie = urldecode($cookie);
    $hashes = [];
    $pos = 0;
    while ($pos + 13 <= strlen($secure_cookie)) {
        $hashes[] = substr($secure_cookie, $pos, 13);
        $pos += 13;
    }
    if ($pos < strlen($secure_cookie)) {
        $hashes[] = substr($secure_cookie, $pos);
    }
    echo COLOR_WHITE . "Clue segments: " . implode(", ", $hashes) . COLOR_RESET . "\n";
    return $hashes;
}

// Main game logic
echo COLOR_YELLOW . "=== The Cryptic Vault: Unlock the Secret ===" . COLOR_RESET . "\n";
echo "Initializing hacking tools...\n";
sleep(2);
echo "Target acquired: $host\n";
sleep(1);
echo "Begin cracking the vault!\n\n";

$known_key = "";
$position = 0;
$username = "guest:";
$separator = ":";
$progress_bar_width = 20;

while (true) {
    // Calculate probe strength
    $length = strlen($username . $separator . $known_key);
    $ua_padding_length = ((7 - $length) % 8 + 8) % 8;
    $user_agent = str_repeat("A", $ua_padding_length);
    $prefix = $username . $user_agent . $separator . $known_key;
    
    // Send probe and get clue
    $cookie = send_probe($user_agent);
    if (!$cookie) {
        echo COLOR_RED . "Vault defenses too strong. Mission aborted." . COLOR_RESET . "\n";
        break;
    }
    
    // Analyze clue
    $hashes = analyze_clue($cookie);
    if (!$hashes) {
        echo COLOR_RED . "Clue corrupted. Mission aborted." . COLOR_RESET . "\n";
        break;
    }
    
    // Target lock
    $block_index = floor(strlen($prefix) / 8);
    if (!isset($hashes[$block_index])) {
        echo COLOR_YELLOW . "Vault fully unlocked! Secret revealed: $known_key" . COLOR_RESET . "\n";
        break;
    }
    
    $target_block = $hashes[$block_index];
    $salt = substr($target_block, 0, 2);
    echo COLOR_WHITE . "Lock $block_index targeted, hash: $target_block" . COLOR_RESET . "\n";
    echo COLOR_WHITE . "Decryption key: $salt" . COLOR_RESET . "\n";
    echo COLOR_YELLOW . "Current probe: $prefix" . COLOR_RESET . "\n";
    
    // Crack the lock
    $found = false;
    foreach (str_split($characters) as $char) {
        $candidate = $prefix . $char;
        $candidate_block = substr($candidate, -8);
        $candidate_hash = crypt($candidate_block, $salt);
        if ($candidate_hash === $target_block) {
            $known_key .= $char;
            echo COLOR_GREEN . "Lock cracked! Found: $char (Secret so far: $known_key)" . COLOR_RESET . "\n";
            $progress = floor((strlen($known_key) / 15) * $progress_bar_width); // Assume key length ~15
            $bar = str_repeat("â–ˆ", $progress) . str_repeat(" ", $progress_bar_width - $progress);
            echo COLOR_CYAN . "Progress: [$bar] " . strlen($known_key) . " locks opened" . COLOR_RESET . "\n\n";
            $found = true;
            sleep(1); // Dramatic effect
            break;
        }
    }
    
    if (!$found) {
        echo COLOR_YELLOW . "No more locks to crack. Final secret: $known_key" . COLOR_RESET . "\n";
        break;
    }
    
    $position++;
}

echo COLOR_GREEN . "Mission Complete! Vault Secret: $known_key" . COLOR_RESET . "\n";

?>
