#!/usr/bin/env python3

# script generated by Claude AI
# script to get admin / web flag
# script for tryhackme room Crypto Failures Implementing your own military-grade encryption is usually not the best idea.
# room link: https://tryhackme.com/room/cryptofailures


import requests
import re
import urllib.parse
from colorama import Fore, Back, Style, init

# Initialize colorama
init(autoreset=True)

def print_info(message):
    print(f"{Fore.BLUE}{Style.BRIGHT}[+] {message}")

def print_warning(message):
    print(f"{Fore.YELLOW}{Style.BRIGHT}[-] {message}")

def print_error(message):
    print(f"{Fore.RED}{Style.BRIGHT}[!] {message}")

def print_success(message):
    print(f"{Fore.GREEN}{Style.BRIGHT}[âœ“] {message}")

def print_data(label, data):
    print(f"{Fore.CYAN}{label}: {Fore.WHITE}{data}")

def print_divider():
    print(f"{Fore.MAGENTA}{Style.BRIGHT}{'-' * 60}")

def exploit_cookie(target_ip):
    print_info(f"Targeting server at: {Fore.YELLOW}{target_ip}")
    
    # Step 1: Get the original cookie by visiting the page
    session = requests.Session()
    url = f"http://{target_ip}/"
    
    print_info("Requesting initial page to get the guest cookie...")
    try:
        response = session.get(url)
    except requests.exceptions.ConnectionError:
        print_error(f"Failed to connect to {target_ip}. Check if the server is reachable.")
        return False
    
    if 'secure_cookie' not in session.cookies or 'user' not in session.cookies:
        print_error("Failed to get the required cookies!")
        return False
    
    # Extract cookies
    original_cookie = session.cookies.get('secure_cookie')
    print_data("Original secure_cookie obtained", original_cookie)
    
    # URL decode the cookie
    decoded_cookie = urllib.parse.unquote(original_cookie)
    
    # Step 2: Extract the salt (first 2 characters)
    salt = decoded_cookie[:2]
    print_data("Salt extracted", salt)
    
    # Get the user agent
    user_agent = session.headers.get('User-Agent')
    print_data("Using User-Agent", user_agent)
    
    # Step 3: Create the chunks for guest and admin
    guest_first_chunk = f"guest:{user_agent[:2]}"
    admin_first_chunk = f"admin:{user_agent[:2]}"
    
    # Step 4: Encrypt the chunks using the same algorithm
    import crypt
    guest_first_encrypted = crypt.crypt(guest_first_chunk, salt)
    admin_first_encrypted = crypt.crypt(admin_first_chunk, salt)
    
    print_data("Guest first chunk encrypted", guest_first_encrypted)
    print_data("Admin first chunk encrypted", admin_first_encrypted)
    
    # Step 5: Verify our assumption by checking if the first 13 chars match
    original_first_chunk = decoded_cookie[:13]
    print_data("Original first chunk", original_first_chunk)
    
    if original_first_chunk != guest_first_encrypted:
        print_warning("Original chunk doesn't match our encrypted guest chunk")
        print(f"{Fore.YELLOW}    This might indicate the encryption method or user agent is different")
    
    # Step 6: Create the modified cookie
    modified_cookie = admin_first_encrypted + decoded_cookie[13:]
    encoded_modified_cookie = urllib.parse.quote(modified_cookie)
    
    print_data("Modified cookie", modified_cookie)
    print_data("URL encoded modified cookie", encoded_modified_cookie)
    
    # Step 7: Send the request with modified cookies
    print_info("Sending request with admin cookie...")
    
    # Create a new session with our modified cookies
    admin_session = requests.Session()
    admin_session.cookies.set('user', 'admin', domain=target_ip)
    admin_session.cookies.set('secure_cookie', encoded_modified_cookie, domain=target_ip)
    
    # Make the request
    admin_response = admin_session.get(url)
    
    # Step 8: Extract the flag from the response
    print_info("Server response:")
    print_divider()
    print(f"{Fore.WHITE}{admin_response.text}")
    print_divider()
    
    # Try to extract the flag using regex
    flag_match = re.search(r'congrats: (.*?)\. Now I want the key', admin_response.text)
    if flag_match:
        flag = flag_match.group(1)
        print_success(f"Success! Flag found: {Fore.GREEN}{Back.BLACK}{Style.BRIGHT}{flag}")
        return True
    else:
        print_error("Couldn't find the flag in the response. The exploit might have failed.")
        return False

if __name__ == "__main__":
    import sys
    
    print(f"{Fore.CYAN}{Style.BRIGHT}{'=' * 60}")
    print(f"{Fore.CYAN}{Style.BRIGHT}= {Fore.WHITE}Cookie Encryption Exploit Tool {Fore.YELLOW}v1.0 {Fore.CYAN}{' ' * 22}=")
    print(f"{Fore.CYAN}{Style.BRIGHT}{'=' * 60}")
    
    if len(sys.argv) < 2:
        print_error(f"Usage: {sys.argv[0]} <target_ip>")
        print(f"{Fore.YELLOW}Example: {Fore.WHITE}{sys.argv[0]} 10.10.199.224")
        sys.exit(1)
    
    target_ip = sys.argv[1]
    try:
        exploit_cookie(target_ip)
    except Exception as e:
        print_error(f"An unexpected error occurred: {str(e)}")
    
    print(f"\n{Fore.CYAN}{Style.BRIGHT}{'=' * 60}")
